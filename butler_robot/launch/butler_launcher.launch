<?xml version="1.0"?>
<launch>
  <!-- LAUNCHING GAZEBO -->
  <arg name="paused" default="false"/>
  <arg name="gui" default="true"/>
  <!-- startup simulated world -->
 <!--  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include> -->
<!-- 
      send robot urdf to param server 
      urdf xml robot description loaded on the Parameter Server  -->

<!-- 
      <param name="robot_description" command="$(find xacro)/xacro.py '$(find butler5)/urdf/butler5.urdf.xacro'" /> -->

      <!-- push robot_description to factory and spawn robot in gazebo -->
<!-- 
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0.1" respawn="false" output="screen" /> -->

  <!-- Robot state publisher -->
 <!--  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" type="string" value="" />
  </node> -->

  <!-- Fake Calibration -->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub /calibrated std_msgs/Bool true" />

  <!-- joint_state_controller -->
<!--   <rosparam file="$(find butler_robot)/config/joint_state_controller.yaml" command="load"/>
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>

  <rosparam file="$(find butler_robot)/config/controllers2.yaml" command="load"/>
  <node name="position_trajectory_controller" pkg="controller_manager" type="controller_manager" args="spawn position_trajectory_controller" respawn="false" output="screen"/> -->

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <!-- <rosparam file="$(find butler_robot)/config/controllers.yaml"/> -->

  <node pkg="tf" type="static_transform_publisher" name="dummycam_cameralink" args="0 0 0 0 0 0 /dummy_cam /camera_link  100" />
  <node pkg="tf" type="static_transform_publisher" name="sw_arm_r_to_base" args="0 0 0 0 0 0 /base_link /sw_arm_right_1  100" />
  <node pkg="tf" type="static_transform_publisher" name="sw_arm_l_to_base" args="0 0 0 0 0 0 /base_link /sw_arm_left_1  100" />
  <node pkg="tf" type="static_transform_publisher" name="world_base" args="0 0 0 0 0 0 /world /base_link  100" />

  <!-- <include file="$(find astra_launch)/launch/astrapro.launch"> 
    <arg name="camera" value="camera"/>
    <arg name="depth_registration" value="true" />
  </include>
-->

<!-- these are for launching the stuff needed to run Object detection-->
<!--
  <include file="$(find darknet_ros)/launch/butler_detector.launch"/>
  <include file="$(find usb_cam)/launch/rgb_topic.launch"/>
  <include file="$(find astra_launch)/launch/astra.launch"/>-->

<!-- By default, we are not in debug mode -->
<arg name="debug" default="false" />
<include file="$(find butler_robot)/launch/move_group.launch">
  <arg name="fake_execution" value="false"/>
  <arg name="info" value="true"/>
  <arg name="debug" value="$(arg debug)"/><!-- 
  <remap from="joint_states" to="robot/joint_states"/> -->
</include>

<!-- Run Rviz and load the default config to see the state of the move_group node -->
<include file="$(find butler_robot)/launch/moveit_rviz.launch">
  <arg name="config" value="true"/>
  <arg name="debug" value="$(arg debug)"/>
</include>

<!--If database loading was enabled, start mongodb as well -->
<!--<include file="$(find butler_robot)/launch/default_warehouse_db.launch" if="$(arg db)"/> -->
</launch>